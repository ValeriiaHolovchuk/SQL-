Question

1. How can you produce a list of facilities that charge a fee to members, and that fee is less than 1/50th of the monthly maintenance cost? Return the facid, facility name, member cost, and monthly maintenance of the facilities in question.
SELECT  facid, 
	name, 
	membercost,  
	monthlymaintenance  
FROM cd.facilities
WHERE membercost < (monthlymaintenance/50) and membercost > 0;

2. How can you produce a list of all facilities with the word 'Tennis' in their name?
SELECT *
FROM cd.facilities
WHERE name ILIKE '%Tennis%';

3. How can you retrieve the details of facilities with ID 1 and 5? Try to do it without using the OR operator.
SELECT *
FROM cd.facilities
WHERE facid IN (1,5);

4. How can you produce a list of facilities, with each labelled as 'cheap' or 'expensive' depending on if their monthly maintenance cost is more than $100? Return the name and monthly maintenance of the facilities in question.
SELECT name,
		CASE 
			WHEN monthlymaintenance < 100 THEN 'cheap'
			WHEN monthlymaintenance > 100 THEN 'expensive'
		END AS cost
FROM cd.facilities;

5. How can you produce a list of members who joined after the start of September 2012? Return the memid, surname, firstname, and joindate of the members in question.
SELECT  memid, 
	surname, 
	firstname, 
	joindate
FROM cd.members
WHERE joindate >= DATE '2012-09-01'

6. How can you produce a list of the start times for bookings by members named 'David Farrell'?

SELECT starttime
FROM cd.bookings
WHERE memid = 
		(SELECT memid
		 FROM cd.members
		 WHERE surname = 'Farrell' AND firstname = 'David');

7. How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? Return a list of start time and facility name pairings, ordered by the time.
SELECT cb.starttime AS start, 
	   cf.name
FROM cd.bookings cb
JOIN cd.facilities cf ON cb.facid = cf.facid
WHERE cf.name LIKE 'Tennis Court%' AND 
	  cb.starttime >= DATE '2012-09-21' AND 
	  cb.starttime < DATE '2012-09-22'
ORDER BY starttime;

8.How can you output a list of all members who have recommended another member? Ensure that there are no duplicates in the list, and that results are ordered by (surname, firstname).
SELECT DISTINCT rec.firstname AS firstname, 
		rec.surname AS surname 
FROM cd.members memb
JOIN cd.members rec ON rec.memid = memb.recommendedby
ORDER BY surname, firstname;

9. How can you output a list of all members, including the individual who recommended them (if any)? Ensure that results are ordered by (surname, firstname).
SELECT mms.firstname AS memfname, 
	   mms.surname AS memsname,
	   rec.firstname AS recfname,
	   rec.surname AS recsname
FROM cd.members mms
LEFT OUTER JOIN cd.members rec ON mms.recommendedby = rec.memid
ORDER BY memsname, memfname;

10. How can you produce a list of all members who have used a tennis court? Include in your output the name of the court, and the name of the member formatted as a single column. Ensure no duplicate data, and order by the member name followed by the facility name.
SELECT DISTINCT CONCAT(cdm.firstname, ' ', cdm.surname) AS member, 
	        cdf.name AS facility
FROM cd.members cdm
JOIN cd.bookings cdb ON cdm.memid = cdb.memid
JOIN cd.facilities cdf ON cdb.facid = cdf.facid
WHERE cdf.name LIKE 'Tennis Court%'
ORDER BY member, facility;

11. How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? Remember that guests have different costs to members (the listed costs are per half-hour 'slot'), and the guest user is always ID 0. Include in your output the name of the facility, the name of the member formatted as a single column, and the cost. Order by descending cost, and do not use any subqueries.
SELECT CONCAT(cdm.firstname, ' ', cdm.surname) AS member, 
	      cdf.name AS facility,
	      cdb.slots *
		CASE 
			WHEN cdm.memid = 0 THEN cdf.guestcost
			ELSE cdf.membercost
			END AS cost
			  	
FROM cd.members cdm
JOIN cd.bookings cdb ON cdm.memid = cdb.memid
JOIN cd.facilities cdf ON cdb.facid = cdf.facid
WHERE cdb.starttime >= '2012-09-14' AND cdb.starttime < '2012-09-15' AND 
	   cdb.slots *
		CASE 
			WHEN cdm.memid = 0 THEN cdf.guestcost
			ELSE cdf.membercost
			END > 30
ORDER BY cost DESC;


12. How can you output a list of all members, including the individual who recommended them (if any), without using any joins? Ensure that there are no duplicates in the list, and that each firstname + surname pairing is formatted as a column and ordered.
SELECT DISTINCT CONCAT (cdm1.firstname, ' ' ,cdm1.surname) AS member,
	   (SELECT CONCAT (cdm2.firstname, ' ' ,cdm2.surname) 
	    FROM cd.members cdm2
	    WHERE cdm2.memid = cdm1.recommendedby) AS recommender
FROM cd.members cdm1
ORDER BY member;

13. The Produce a list of costly bookings exercise contained some messy logic: we had to calculate the booking cost in both the WHERE clause and the CASE statement. Try to simplify this calculation using subqueries. For reference, the question was:
How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? Remember that guests have different costs to members (the listed costs are per half-hour 'slot'), and the guest user is always ID 0. Include in your output the name of the facility, the name of the member formatted as a single column, and the cost. Order by descending cost.
SELECT member, facility, cost
FROM (
  SELECT 
    CONCAT(cdm.firstname, ' ', cdm.surname) AS member,
    cdf.name AS facility,
    cdb.slots *
      CASE 
        WHEN cdm.memid = 0 THEN cdf.guestcost
        ELSE cdf.membercost
      END AS cost,
    cdb.starttime                      
  FROM cd.members cdm
  JOIN cd.bookings cdb ON cdm.memid = cdb.memid
  JOIN cd.facilities cdf ON cdb.facid = cdf.facid   
) AS bookings
WHERE starttime >= '2012-09-14'      
  AND starttime < '2012-09-15'
  AND cost > 30                      
ORDER BY cost DESC;


14. Let's try adding the spa to the facilities table again. This time, though, we want to automatically generate the value for the next facid, rather than specifying it as a constant. Use the following values for everything else:
Name: 'Spa', membercost: 20, guestcost: 30, initialoutlay: 100000, monthlymaintenance: 800.
INSERT INTO 
	cd.facilities(facid, name, membercost, guestcost, initialoutlay, monthlymaintenance)
VALUES
	((SELECT MAX(facid)+1 FROM cd.facilities), 'Spa', 20, 30, 100000, 800)

15. How can we make that more general, to delete all members who have never made a booking?
DELETE 
FROM cd.members 

16. Produce a count of the number of recommendations each member has made. Order by member ID.
SELECT recommendedby, 
       COUNT(*) AS count
FROM cd.members
WHERE recommendedby IS NOT NULL
GROUP BY recommendedby
ORDER BY recommendedby

17. Produce a list of the total number of slots booked per facility. For now, just produce an output table consisting of facility id and slots, sorted by facility id.
SELECT facid, 
       SUM(slots) AS "Total Slots"
FROM cd.bookings
GROUP BY facid
ORDER BY facid;

18. Produce a list of the total number of slots booked per facility in the month of September 2012. Produce an output table consisting of facility id and slots, sorted by the number of slots.
SELECT facid, 
       SUM(slots) AS "Total Slots"
FROM cd.bookings
WHERE starttime >= '2012-09-01' AND  starttime < '2012-10-01'
GROUP BY facid
ORDER BY SUM(slots);

19. Produce a list of the total number of slots booked per facility per month in the year of 2012. Produce an output table consisting of facility id and slots, sorted by the id and month.
SELECT facid, 
       EXTRACT(MONTH FROM starttime) AS month, 		
       SUM(slots) AS "Total Slots"
FROM cd.bookings
WHERE EXTRACT(YEAR FROM starttime) = 2012
GROUP BY facid, month
ORDER BY facid;

20. Produce a list of facilities with more than 1000 slots booked. Produce an output table consisting of facility id and slots, sorted by facility id.
SELECT facid, 
       SUM(slots) AS "Total Slots"
FROM cd.bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;

21. Produce a list of facilities along with their total revenue. The output table should consist of facility name and revenue, sorted by revenue. Remember that there's a different cost for guests and members!
SELECT cdf.name, SUM(slots * 
			     CASE
				WHEN memid = 0 THEN cdf.guestcost
				ELSE cdf.membercost
			     END) AS revenue
					 
FROM cd.bookings cdb
JOIN cd.facilities cdf ON cdb.facid = cdf.facid
GROUP BY cdf.name
ORDER BY revenue;

22.Produce a list of facilities with a total revenue less than 1000. Produce an output table consisting of facility name and revenue, sorted by revenue. Remember that there's a different cost for guests and members!
SELECT cdf.name, SUM(slots *
			CASE 
				WHEN memid = 0 THEN cdf.guestcost
				ELSE cdf.membercost
			END) AS revenue
FROM cd.bookings cdb
JOIN cd.facilities cdf ON cdb.facid = cdf.facid
GROUP BY cdf.name
HAVING SUM(slots *
		CASE 
			WHEN memid = 0 THEN cdf.guestcost
			ELSE cdf.membercost
		END) < 1000
ORDER BY revenue;


